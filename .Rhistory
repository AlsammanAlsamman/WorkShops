#Clear the workspace
rm(list=ls())
#Get the path sperator
if (Sys.info()[1] == "Windows") {
path.sep <- "\\"
} else {
path.sep <- "/"
}
#Loading libraries
library(SNPRelate)
library(ggplot2)
library(ape)
#Get the current directory
currentDir<-getwd()
# if not exist then create results folder
if (!file.exists(file.path(currentDir,"Results"))) {
dir.create(file.path(currentDir,"Results"))
}
# if not exist then create results sub folder for phylogenetics
if (!file.exists(file.path(currentDir,"Results","Phylogenetics"))) {
dir.create(file.path(currentDir,"Results","Phylogenetics"))
}
vcffile<-file.path(currentDir,"Data","Barley.vcf")
outfilename<-"Barley"
outputTitle<-"Barley Genotype Diversity"
ResultsFolder<-file.path(currentDir,"Results","Phylogenetics")
# load important functions
source(file.path(currentDir,"functions","helpfulFunctions.R"))
maf<-0.05
missing.rate<-0.1
# read vcf file and convert to gds
gdsfilename <- paste(outfilename,".gds",sep="")
# remove file if exists
if (file.exists(gdsfilename)) {
file.remove(gdsfilename)
}
snpgdsVCF2GDS(vcffile, gdsfilename)
snpgdsSummary(gdsfilename)
genofile <- openfn.gds(gdsfilename)
#Calculate Distance matrix
dissMatrix  <-  snpgdsDiss(genofile, maf=maf, missing.rate= missing.rate)
# The parameters are
# genofile: the genotype file
# maf: the minor allele frequency threshold
# missing.rate: the missing rate threshold
# Hierarchical clustering
snpHCluster <-  snpgdsHCluster(dissMatrix, sample.id=NULL, need.mat=TRUE, hang=0.25)
# Phylogenetic tree
cutTree = snpgdsCutTree(snpHCluster, z.threshold=15, outlier.n=5, n.perm = 5000, samp.group=NULL,
col.outlier="red", col.list=NULL, pch.outlier=4, pch.list=NULL,label.H=FALSE, label.Z=TRUE,
verbose=TRUE)
# close genotype file
closefn.gds(genofile)
# These parameters are
# z.threshold: the threshold of Z-score for outlier detection
# outlier.n: the number of outliers to be detected
# n.perm: the number of permutations for outlier detection
# samp.group: the sample group for outlier detection
# col.outlier: the color for outlier
# col.list: the color for the rest of samples
# pch.outlier: the plotting character for outlier
# pch.list: the plotting character for the rest of samples
# label.H: whether to label the height of the tree
# label.Z: whether to label the Z-score of each sample
# verbose: whether to print the progress
pdf(paste(ResultsFolder,"/",outfilename,".pdf",sep=""), width=30, height=8)
snpgdsDrawTree(
cutTree,
main = "Phylogenetic tree",
y.label.kinship=T,
cex=1,
font=1,
cex.lab=0.5,
lwd=10,
leaflab="none",
cex.axis=2)
dev.off()
# open pdf file
openPDFfile(paste(ResultsFolder,"/",outfilename,".pdf",sep=""))
# save tree as newick file
write.tree(as.phylo(as.hclust(cutTree$dendrogram)), file=paste(ResultsFolder,"/",outfilename,".newick",sep=""))
names(cutTree)
# samples
# save samples as text file
write.table(cutTree$samples, file=paste(ResultsFolder,"/",outfilename,".samples.txt",sep=""), sep="\t", quote=F, row.names=F, col.names=F)
# save samp.order
write.table(cutTree$samp.order, file=paste(ResultsFolder,"/",outfilename,".samp.order.txt",sep=""), sep="\t", quote=F, row.names=F, col.names=F)
# save samp.group
write.table(cutTree$samp.group, file=paste(ResultsFolder,"/",outfilename,".samp.group.txt",sep=""), sep="\t", quote=F, row.names=F, col.names=F)
# save the distance matrix
dissMatrixTable<-as.data.frame(dissMatrix$diss)
rownames(dissMatrixTable)<-dissMatrix$sample.id
colnames(dissMatrixTable)<-dissMatrix$sample.id
write.table(dissMatrixTable, file=paste(ResultsFolder,"/",outfilename,".dissMatrix.tsv",sep=""), sep="\t", quote=F, row.names=T, col.names=T)
#Clear the workspace
rm(list=ls())
#Get the path sperator
if (Sys.info()[1] == "Windows") {
path.sep <- "\\"
} else {
path.sep <- "/"
}
library(dartR)
# install.packages("dismo")
# install.packages("dartR")
library(adegenet)
library(vcfR)
library(poppr)
#install.packages("poppr")
library(reshape2)
library(xlsx)
#install.packages("xlsx")
library(ggplot2)
library(hierfstat)
#install.packages("hierfstat")
# library(devtools)
# install_github("nikostourvas/PopGenUtils")
#library("PopGenUtils")
library(inline)
library(SNPRelate)
library(ggplot2)
library(xlsx)
#Get the current directory
currentDir<-getwd()
# if not exist then create results folder
if (!file.exists(file.path(currentDir,"Results"))) {
dir.create(file.path(currentDir,"Results"))
}
# if not exist then create results sub folder for basic stats
if (!file.exists(file.path(currentDir,"Results","BasicStats"))) {
dir.create(file.path(currentDir,"Results","BasicStats"))
}
vcfFile<-file.path(currentDir,"Data","Barley.vcf")
metadataFile<-file.path(currentDir,"Data","BarleyPassport.tsv")
ResultFolder<-file.path(currentDir,"Results","BasicStats")
# load important functions
source(file.path(currentDir,"functions","helpfulFunctions.R"))
# load PIC function
source(file.path(currentDir,"functions","PIC.R"))
# log file name with date and time
logFileName<-paste0(ResultFolder,path.sep,"BasicStats_",Sys.Date(),"_",Sys.time(),".log")
# read metadata
metaData <- read.csv( metadataFile , sep="\t", header=TRUE, stringsAsFactors = FALSE, row.names = 1)
# read using vcfR and convert to genlight
vcfData <- read.vcfR(vcfFile)
# convert to genlight
gdata.gen <- vcfR2genlight(vcfData)
# filter data to remove loci with missing data
gdata.gen<-gl.filter.allna(gdata.gen)
# approved Cols with more than 1 value
approvedCols<-apply(metaData,2,function(x) length(unique(x))>1)
# print the name of non approved columns
sink(logFileName, append=TRUE)
print(paste("The following columns have only one value and will be ignored:",paste(names(approvedCols[approvedCols==FALSE]),collapse=", ")))
sink()
# select only approved columns
approvedCols<-names(approvedCols[approvedCols==TRUE])
# for each column calculate basic stats
colStats<-list()
samplenames<-gdata.gen@ind.names
for(metaCol in approvedCols)
{
print(paste("Calculating basic stats for column:",metaCol))
pop(gdata.gen) <- as.factor(metaData[samplenames, metaCol])
# calculate basic stats
genBasicStats<-gl.basic.stats(gdata.gen)
# save to list
colStats[[metaCol]]<-genBasicStats
}
# save the object to file for later use
save(colStats,file=paste0(ResultFolder,path.sep,"BasicStats_",Sys.Date(),"_",Sys.time(),".RData"))
# Statistics table across all columns
statsTable<-data.frame(matrix(NA,nrow = length(colStats),ncol = 10))
rownames(statsTable)<-names(colStats)
colnames(statsTable)<-c("Ho","Hs","Ht","Dst","Htp","Dstp","Fst","Fstp","Fis","Dest")
for (metaCol in names(colStats))
{
print(paste("Plotting basic stats for column:",metaCol))
# statsTable[metaCol,]<-rbind(colStats[[metaCol]]$overall)
statsTable[metaCol,]<-colStats[[metaCol]]$overall
}
# save to tsv file
write.table(statsTable,file=paste0(ResultFolder,path.sep,"BasicStats_",Sys.Date(),"_",Sys.time(),".tsv"),sep="\t",quote=FALSE)
# save as xlsx file
write.xlsx(statsTable,file=paste0(ResultFolder,path.sep,"BasicStats.xlsx"),row.names = TRUE)
# create a folder for plots basicStatsPlot if not exists
if (!dir.exists(paste0(ResultFolder,path.sep,"basicStatsPlot"))) {
dir.create(paste0(ResultFolder,path.sep,"basicStatsPlot"))
# create a pdf folder
dir.create(paste0(ResultFolder,path.sep,"basicStatsPlot",path.sep,"pdf"))
}
# plot the basic stats for each column
for (metaCol in names(colStats))
{
print(paste("Plotting basic stats for column:",metaCol))
# get the stats
genBasicStats<-colStats[[metaCol]]
# get the perloc stats
perLocStats<-genBasicStats$perloc
perLocStats$loc<-rownames(perLocStats)
# melt
perLocStats<-melt(perLocStats, id.vars = "loc")
# remove inf values
perLocStats<-perLocStats[!is.infinite(perLocStats$value),]
# remove NA values
perLocStats<-perLocStats[!is.na(perLocStats$value),]
# plot
p<-ggplot(perLocStats, aes(x=variable, y=value, fill=variable)) +
geom_boxplot()+
# geom_jitter(width = 0.2, size = 1, alpha = 0.3) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle(metaCol)+
# no legend
# guides(fill=FALSE) +
# x title
ylab("Values per loci")+
# y title
xlab("Genetic Index")+
# no plot title
theme(plot.title = element_blank())+
# bigger font size
theme(text = element_text(size=15))
# save to pdf folder
ggsave(paste0(ResultFolder,path.sep,"basicStatsPlot",path.sep,"pdf",path.sep,"BasicStats_",metaCol,".pdf"),p,width = 10, height = 10)
# png
ggsave(paste0(ResultFolder,path.sep,"basicStatsPlot",path.sep,"BasicStats_",metaCol,".png"),p,width = 10, height = 10)
}
# create a folder for plots acrossChromosome if not exists
if (!dir.exists(paste0(ResultFolder,path.sep,"acrossChromosome"))) {
dir.create(paste0(ResultFolder,path.sep,"acrossChromosome"))
# create a pdf folder
dir.create(paste0(ResultFolder,path.sep,"acrossChromosome",path.sep,"pdf"))
}
# plot the basic stats for each column according to chromosome
for (metaCol in names(colStats))
{
print(paste("Plotting basic stats for column:",metaCol))
# get the stats
genBasicStats<-colStats[[metaCol]]
# get the perloc stats
perLocStats<-genBasicStats$perloc
perLocStats$loc<-rownames(perLocStats)
# melt
perLocStats<-melt(perLocStats, id.vars = "loc")
# remove inf values
perLocStats<-perLocStats[!is.infinite(perLocStats$value),]
# remove NA values
perLocStats<-perLocStats[!is.na(perLocStats$value),]
names(genBasicStats)
# position info
positionInfo<-data.frame(loc=gdata.gen@loc.names,chromosome=gdata.gen@chromosome,position=gdata.gen@position)
# merge
perLocStats<-merge(perLocStats,positionInfo,by="loc")
# plot
p<-ggplot(perLocStats, aes(x=variable, y=value, fill=variable)) +
geom_boxplot()+
# geom_jitter(width = 0.2, size = 1, alpha = 0.3) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle(metaCol)+
# no legend
guides(fill=FALSE) +
# x title
ylab("Values per loci")+
# y title
xlab("Genetic Index")+
# no plot title
theme(plot.title = element_blank())+
# bigger font size
theme(text = element_text(size=15))+
# facet according to chromosome
facet_wrap(~chromosome, ncol = 2)
# save to pdf folder
ggsave(paste0(ResultFolder,path.sep,"acrossChromosome",path.sep,"pdf",path.sep,"BasicStats_",metaCol,".pdf"),p,width = 20, height = 30)
# png
ggsave(paste0(ResultFolder,path.sep,"acrossChromosome",path.sep,"BasicStats_",metaCol,".png"),p,width = 20, height = 30)
}
# calculate the MAF for each locus
MAFvalues<-maf(vcfData)
MAFvalues<-as.data.frame(MAFvalues)
# plot the MAF
p<-ggplot(MAFvalues, aes(x=Frequency)) +
geom_histogram(binwidth = 0.01)+
ggtitle("MAF")+
# no legend
guides(fill=FALSE) +
# x title
ylab("Frequency")+
# y title
xlab("MAF")+
# no plot title
theme(plot.title = element_blank())+
# bigger font size
theme(text = element_text(size=15))
# save to pdf folder
ggsave(paste0(ResultFolder,path.sep,"MAF.pdf"),p,width = 10, height = 10)
# png
ggsave(paste0(ResultFolder,path.sep,"MAF.png"),p,width = 10, height = 10)
# create a folder for PIC if not exists
if (!dir.exists(paste0(ResultFolder,path.sep,"PIC"))) {
dir.create(paste0(ResultFolder,path.sep,"PIC"))
}
ResultFolder<-file.path(currentDir,"Results","PIC")
# read vcf file using SNPRelate
snpgdsVCF2GDS(vcfFile, paste("Genotype",".gds",sep=""), method="biallelic.only", verbose=TRUE)
# convert to genlight
genofile <- openfn.gds(paste("Genotype",".gds",sep=""))
# filter data to remove loci with missing data and MAF < 0.05
# get genotype
genotype<-read.gdsn(index.gdsn(genofile, "genotype"))
# get marker names
markerNames<-read.gdsn(index.gdsn(genofile, "snp.rs.id"))
# get sample names
sampleNames<-read.gdsn(index.gdsn(genofile, "sample.id"))
# close the gds file
closefn.gds(genofile)
# add row and column names
rownames(genotype)<-as.character(sampleNames)
colnames(genotype)<-as.character(markerNames)
# calculate the frequency of each allele in each marker
alleleFreq<-apply(genotype,2,function(x) table(x)/length(x))
# remove sites with only one allele (monomorphic sites)
alleleFreq<-alleleFreq[lapply(alleleFreq,length)>1]
# calculate PIC
PIC<-lapply(alleleFreq,PICvec)
# convert to data frame
PIC<-data.frame(do.call(rbind,PIC))
colnames(PIC)<-c("PIC")
PIC$Marker<-rownames(PIC)
# plot PIC as histogram
p<-ggplot(PIC,aes(x=PIC))+geom_histogram(binwidth = 0.01)+theme_bw()+labs(x="PIC",y="Frequency")
ggsave(paste(ResultFolder,path.sep,"PIC_histogram.png",sep=""),p,width=10,height=5)
# as boxplot
p<-ggplot(PIC,aes(x="PIC",y=PIC))+geom_boxplot()+theme_bw()+labs(x="PIC",y="Frequency")
ggsave(paste(ResultFolder,path.sep,"PIC_boxplot.png",sep=""),p,width=10,height=5)
# as table
PIC<-PIC[,c("Marker","PIC")]
write.table(PIC,file=paste(ResultFolder,path.sep,"PIC.tsv",sep=""),sep="\t",quote=FALSE,row.names = FALSE)
# as xlsx
write.xlsx(PIC,file=paste(ResultFolder,path.sep,"PIC.xlsx",sep=""),row.names = FALSE)
